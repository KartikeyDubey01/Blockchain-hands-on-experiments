= Creating a Blockchain Network with a Minimum of 6 Blocks

== 1. Aim/Overview of the Practical

The aim of this experiment is to understand how a blockchain network works by creating a simple blockchain system with 6 blocks. A blockchain is a distributed, immutable ledger where each "block" contains a set of transactions, a reference (hash) to the previous block, and a timestamp. In this experiment, we will create a basic blockchain from scratch using Python and simulate how blocks are added to the chain.

By completing this experiment, you will:

Understand the fundamental components of a blockchain.

== 2. Task to be Done/Steps of the Experiment

Learn how to create blocks and link them using cryptographic hashes.

Create a simple blockchain network with multiple blocks.

Understand blockchain structure: Learn about blocks, transactions, and how they are linked.

Create a basic blockchain: Implement a simple blockchain using Python, create blocks, and link them.

Add a minimum of 6 blocks: Simulate adding multiple blocks to the blockchain.

Understand hashing: Learn how the hashing mechanism ensures the integrity and immutability of the blockchain.

== 3. Steps for Experiment/Practical

=== Step 1: Define the Block Structure

A block in a blockchain typically contains the following components:

Index: A unique identifier for each block.

Timestamp: The time the block was created.

Data: The information (or transactions) stored in the block.

Previous Hash: The hash of the previous block, ensuring the chain-like structure.

Hash: A cryptographic hash of the current block (using SHA-256) that ensures the integrity of the block.

=== Step 2: Install Required Libraries

We will use Python for this experiment. The necessary library to handle cryptographic hashing is hashlib.

Install Python (if not already installed):

Ensure you have Python 3.x installed on your system.

Install hashlib (comes pre-installed with Python):

```bash
pip install hashlib
```

=== Step 3: Implement the Blockchain Code

Here's a Python script to implement a simple blockchain with 6 blocks:

[source,python]
import hashlib import time
class Block: def init(self, index, data, previous_hash): self.index = index self.timestamp = time.time() self.data = data self.previous_hash = previous_hash self.hash = self.calculate_hash()
def calculate_hash(self):
    block_string = str(self.index) + str(self.timestamp) + str(self.data) + str(self.previous_hash)
    return hashlib.sha256(block_string.encode()).hexdigest()
class Blockchain: def init(self): self.chain = [] self.create_genesis_block()
def create_genesis_block(self):
    genesis_block = Block(0, "Genesis Block", "0")
    self.chain.append(genesis_block)
def add_block(self, data):
    previous_block = self.chain[-1]
    new_block = Block(len(self.chain), data, previous_block.hash)
    self.chain.append(new_block)
def print_blockchain(self):
    for block in self.chain:
        print(f"Block #{block.index}")
        print(f"Timestamp: {time.ctime(block.timestamp)}")
        print(f"Data: {block.data}")
        print(f"Hash: {block.hash}")
        print(f"Previous Hash: {block.previous_hash}")
        print("-" * 50)
# Creating the blockchain
blockchain = Blockchain()
# Adding 6 blocks
for i in range(1, 7): blockchain.add_block(f"Block {i} data")
# Print the blockchain
blockchain.print_blockchain()

=== Step 4: Explanation of the Code

Block Class:

The Block class represents each individual block in the blockchain.

The calculate_hash() method generates a cryptographic hash using SHA-256 of the block's properties (index, timestamp, data, previous hash).

Blockchain Class:

The Blockchain class manages the blockchain.

create_genesis_block() creates the first block manually.

add_block() adds a new block to the chain by linking it with the hash of the previous block.

print_blockchain() displays each block's contents.

Adding Blocks:

We loop from 1 to 6 to add 6 blocks with sample data to the blockchain.

Printing Blockchain:

The blockchain's index, timestamp, data, hash, and previous hash are printed to visualize the linkage and integrity.

=== Step 5: Running the Script

Save the script as simple_blockchain.py and run it using:

```bash
python simple_blockchain.py
```

== 4. Summary/Conclusion

In this experiment, we successfully created a basic blockchain using Python and added 6 blocks to the chain. Each block was linked to the previous one via cryptographic hashes. This ensures tamper-proof integrity, as altering one block would require changing all subsequent blocks.

This experiment helped solidify core blockchain principles such as immutability, transparency, and data security through cryptographic means.

== 5. Learning Outcomes

By completing this experiment, I have learned:

Blockchain Basics: Structure of blocks and how they are linked.

Hashing in Blockchain: Use of SHA-256 to maintain block integrity.

Python for Blockchain: How to simulate block creation and chaining using Python.

Security: How block linkage and hashing secure a blockchain against tampering.
